#!/usr/bin/env python

import argparse
import os
import shutil
import subprocess


def run_command(args):
    p = subprocess.Popen(
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True
    )
    (so, se) = p.communicate()
    return (p.returncode, so, se)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true')
    args = parser.parse_args()

    CACHEDIR = "/var/cache/ansible/ansible.checkout.clean"
    BASEDIR = "/var/cache/ansible/version_checkouts"

    (rc, so, se) = run_command('ansible-list-versions')
    VERSIONS = [x.strip() for x in so.split('\n')
                if x.strip() and 'devel' not in x]

    for V in VERSIONS:
        if args.verbose:
            print('#####################################################')
            print('process %s checkout' % V)
        dstdir = os.path.join(BASEDIR, 'ansible.%s' % V)
        if not os.path.isdir(dstdir):
            shutil.copytree(CACHEDIR,dstdir)
        else:
            # skip existing checkouts
            continue

        cmd = 'cd %s; git checkout -f tags/%s' % (dstdir, V)
        if args.verbose:
            print('cmd: %s' % cmd)
        (rc, so, se) = run_command(cmd)
        if args.verbose:
            print('rc: %s' % rc)
            print('so: %s' % so)
            print('se: %s' % se)

        # any submodules?
        gmfile = os.path.join(dstdir, '.gitmodules')
        if os.path.isfile(gmfile):
            coredir = os.path.join(dstdir, 'lib/ansible/modules/core')
            if not os.path.isdir(coredir):
                continue
            sysdir = os.path.join(coredir, 'system')
            if os.path.isdir(sysdir):
                continue
            #import epdb; epdb.st()
            cmd = 'cd %s; git submodule update --init --recursive' % dstdir
            if args.verbose:
                print('cmd: %s' % cmd)
            (rc, so, se) = run_command(cmd)
            if args.verbose:
                print('rc: %s' % rc)
                print('so: %s' % so)
                print('se: %s' % se)


if __name__ == "__main__":
    main()
